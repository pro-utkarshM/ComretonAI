module comreton_verifier::mlp_verifier {
    use comreton_verifier::groth16;

    const E_INVALID_PROOF: u64 = 1;

    const VK_ALPHA_1: vector<u8> = x"020491192805390485299153009773594534940189261866228447918068658471970481763042938348536305329020091834715615783656656296799403971227344990262126617854595801";
    const VK_BETA_2: vector<u8> = x"637561435168872520640394826286896279362574404379430571522201152845965673873142528228787583008591238979814505913535330734131977717686514426657522593971320105052426263702622775529010820943566974098356802205909718731711403713312068560218470351055287454032882326911475847281911627322998653383771596923500591366790100";
    const VK_GAMMA_2: vector<u8> = x"010857046999023057135944570762232829481370756359578518086990519993285655852781011559732032986387107991004021392285783925812861821192530917403151452391805634849565392312343141760497324748927243841819058726360014877028064930695810193040823678758634336813322034031454355683168513275934012081057410762141200935310100";
    const VK_DELTA_2: vector<u8> = x"010857046999023057135944570762232829481370756359578518086990519993285655852781011559732032986387107991004021392285783925812861821192530917403151452391805634849565392312343141760497324748927243841819058726360014877028064930695810193040823678758634336813322034031454355683168513275934012081057410762141200935310100";

    fun get_ic(): vector<vector<u8>> {
        vector[
            // IC[0]
            x"8748804935349216273020498043661884626228290561554810437724403051886814383973273675424327346797187477525296844137341173564527926008645000695528864942005501",
            // IC[1]
            x"015127749767705733576064471573626072812466696119647445107756041207236936981348788212564072643967501948630219906511705993685237689307448304860040443891286801"
        ]
    }

    /// CLI-callable wrapper for testing proof verification
    public entry fun verify_proof_entry(
        _signer: &signer,
        a: vector<u8>,
        b: vector<u8>,
        c: vector<u8>,
        public_inputs: vector<vector<u8>>
    ) {
        verify_groth16_proof(a, b, c, public_inputs);
    }

    /// Internal proof verification logic
    public fun verify_groth16_proof(
        a: vector<u8>,
        b: vector<u8>,
        c: vector<u8>,
        public_inputs: vector<vector<u8>>
    ) {
        let result = groth16::bn254_pairing_check(
            a, b, VK_ALPHA_1, VK_BETA_2, public_inputs, get_ic(), VK_GAMMA_2, VK_DELTA_2, c
        );
        assert!(result, E_INVALID_PROOF);
    }
}
